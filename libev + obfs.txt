apt-get -y update
apt-get -y upgrade
apt-get -y install software-properties-common && add-apt-repository -y ppa:max-c-lv/shadowsocks-libev
apt-get -y update

apt install -y shadowsocks-libev

apt-get -y install --no-install-recommends build-essential autoconf libtool libssl-dev libpcre3-dev libc-ares-dev libev-dev asciidoc xmlto automake git rng-tools

git clone https://github.com/shadowsocks/simple-obfs.git



cd simple-obfs
git submodule update --init --recursive
./autogen.sh
./configure && make
make install

cd ..
rm -rf simple-obfs



 cat > /etc/shadowsocks-libev/config.json<<-EOF
{
    "server":${server_value},
    "server_port":${shadowsocksport},
    "local_address":"127.0.0.1",
    "local_port":1080,
    "password":"${shadowsockspwd}",
    "timeout":600,
    "method":"${shadowsockscipher}"
}
EOF

cat > /etc/shadowsocks-libev/config.json<<-EOF
{
    "server":"0.0.0.0",
    "server_port":7777,
    "local_port":1080,
    "password":"MayGodBlessMe",
    "timeout":60,
    "method":"chacha20-ietf-poly1305",
    "plugin":"/usr/local/bin/obfs-server --obfs http"
}
EOF

/usr/bin/ss-server -u -c /etc/shadowsocks-libev/config.json



#### docker 构建或者运行时可以先拷贝替换config.json的配置，在运行时通过 docker run -p 7777:7777 -d shzhai/sslibev-obfs /usr/bin/ss-server -u -c /etc/shadowsocks-libev/config.json


/usr/bin/ss-server -u -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks-libev.pid
/usr/local/bin/obfs-server --obfs http


#############################
通过环境变量文件传递参数
docker run -d -p 6666:6666 --restart always --env-file ssrenv.list shzhai/ssr

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ssrenv.list
===========================================================================================

#Override setting for ssr

# SERVER_ADDR=0.0.0.0
SERVER_PORT=8888
PASSWORD=MayGodBlessMe
METHOD=aes-256-cfb
PROTOCOL=auth_chain_a
# PROTOCOLPARAM=32
OBFS=tls1.2_ticket_auth
# OBFS_PARAM=www.bing.com
# TIMEOUT=300
# DNS_ADDR=8.8.8.8
# DNS_ADDR_2=8.8.4.4


===========================================================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Dockerfile to Build shzhai\ssr

===========================================================================================

# FROM ubuntu
FROM ubuntu:16.04

ARG WorkDir=shadowsocks-r
ENV WorkDir $WorkDir
ENV libsodium_file libsodium-1.0.16
ENV libsodium_url https://github.com/jedisct1/libsodium/releases/download/1.0.16/libsodium-1.
0.16.tar.gz
# ENV SERVER_ADDR     0.0.0.0
ENV SERVER_PORT     8888
ENV PASSWORD        MayGodBlessMe
ENV METHOD          chacha20-ietf
ENV PROTOCOL        auth_sha1_v4_compatible
# ENV PROTOCOLPARAM   32
ENV OBFS            tls1.2_ticket_auth_compatible
# ENV TIMEOUT         300
# ENV DNS_ADDR        8.8.8.8
# ENV DNS_ADDR_2      8.8.4.4

RUN apt-get -y update \
&& apt-get -y install wget python python-dev python-setuptools openssl libssl-dev curl wget u
nzip gcc automake autoconf make libtool
# && wget --no-check-certificate -O shadowsocksR.sh https://raw.githubusercontent.com/teddysu
n/shadowsocks_install/master/shadowsocksR.sh \
# && chmod +x shadowsocksR.sh \
# && ./shadowsocksR.sh 2>&1 | tee shadowsocksR.log

# Configure container to run as an executable
# ENTRYPOINT ["/usr/local/bin/ssserver"]
RUN mkdir -p ${WorkDir} \
&& cd ${WorkDir}

RUN wget --no-check-certificate -O ${libsodium_file}.tar.gz ${libsodium_url}
RUN wget --no-check-certificate -O shadowsocksr-3.2.1.tar.gz https://github.com/shadowsocksrr
/shadowsocksr/archive/3.2.1.tar.gz

RUN tar zxf ${libsodium_file}.tar.gz \
&& cd ${libsodium_file} \
&& ./configure --prefix=/usr && make && make install \
&& ldconfig \
&& cd ../ \
&& tar zxf shadowsocksr-3.2.1.tar.gz \
&& mv shadowsocksr-3.2.1/shadowsocks /usr/local/

WORKDIR /usr/local/shadowsocks
EXPOSE ${SERVER_PORT}

CMD python server.py -p ${SERVER_PORT} -k ${PASSWORD} -m ${METHOD} -O ${PROTOCOL} -o ${OBFS}

===========================================================================================





整体传参 一个是用CMD ss-server 后面环境变量传递参数，通过环境变量文件比较简单 
或者直接通过在entrypoint中ARG 传递实现指定参数
还可以通过修改json文件模板实现，方法是通过环境变量传入替换Dockerfile中的环境变量，然后修改在CMD或entrypoint中控制先修改json文件，在通过json文件配置启动ss-server 或者 kcptun等！





docker rm -f $(docker ps -alq)


删掉新建的容器